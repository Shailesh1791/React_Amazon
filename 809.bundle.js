"use strict";(self.webpackChunkamazon_store=self.webpackChunkamazon_store||[]).push([[809],{2174:(e,t,o)=>{o.r(t),o.d(t,{default:()=>E});var r=o(4848),n=o(6423),a=o(4477),s=o(5342),i=o(6540),l=o(4977),c=o(439);const d="function"==typeof(0,l.Dp)({}),u=(e,t)=>({WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box",WebkitTextSizeAdjust:"100%",...t&&!e.vars&&{colorScheme:e.palette.mode}}),m=e=>({color:(e.vars||e).palette.text.primary,...e.typography.body1,backgroundColor:(e.vars||e).palette.background.default,"@media print":{backgroundColor:(e.vars||e).palette.common.white}}),p=(e,t=!1)=>{const o={};t&&e.colorSchemes&&"function"==typeof e.getColorSchemeSelector&&Object.entries(e.colorSchemes).forEach(([t,r])=>{const n=e.getColorSchemeSelector(t);n.startsWith("@")?o[n]={":root":{colorScheme:r.palette?.mode}}:o[n.replace(/\s*&/,"")]={colorScheme:r.palette?.mode}});let r={html:u(e,t),"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:{margin:0,...m(e),"&::backdrop":{backgroundColor:(e.vars||e).palette.background.default}},...o};const n=e.components?.MuiCssBaseline?.styleOverrides;return n&&(r=[r,n]),r},h="mui-ecs",x=(0,l.Dp)(d?({theme:e,enableColorScheme:t})=>p(e,t):({theme:e})=>(e=>{const t=p(e,!1),o=Array.isArray(t)?t[0]:t;return!e.vars&&o&&(o.html[`:root:has(${h})`]={colorScheme:e.palette.mode}),e.colorSchemes&&Object.entries(e.colorSchemes).forEach(([t,r])=>{const n=e.getColorSchemeSelector(t);n.startsWith("@")?o[n]={[`:root:not(:has(.${h}))`]:{colorScheme:r.palette?.mode}}:o[n.replace(/\s*&/,"")]={[`&:not(:has(.${h}))`]:{colorScheme:r.palette?.mode}}}),t})(e)),b=function(e){const t=(0,c.b)({props:e,name:"MuiCssBaseline"}),{children:o,enableColorScheme:n=!1}=t;return(0,r.jsxs)(i.Fragment,{children:[d&&(0,r.jsx)(x,{enableColorScheme:n}),!d&&!n&&(0,r.jsx)("span",{className:h,style:{display:"none"}}),o]})};var g=o(9494),y=o(8132),f=o(7788),v=o(7629),S=o(8227),A=o(4164),k=o(9672),C=o(1362),w=o(9450),j=o(9407),W=o(6739),$=o(3356),z=o(9241),M=o(1321),R=o(6148),D=o(1908);function L(e){return(0,D.Ay)("MuiLink",e)}const G=(0,R.A)("MuiLink",["root","underlineNone","underlineHover","underlineAlways","button","focusVisible"]);var F=o(9612);const N=({theme:e,ownerState:t})=>{const o=t.color,r=(0,F.Yn)(e,`palette.${o}.main`,!1)||(0,F.Yn)(e,`palette.${o}`,!1)||t.color,n=(0,F.Yn)(e,`palette.${o}.mainChannel`)||(0,F.Yn)(e,`palette.${o}Channel`);return"vars"in e&&n?`rgba(${n} / 0.4)`:(0,k.X4)(r,.4)},P={primary:!0,secondary:!0,error:!0,info:!0,success:!0,warning:!0,textPrimary:!0,textSecondary:!0,textDisabled:!0},T=(0,W.Ay)(g.A,{name:"MuiLink",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`underline${(0,j.A)(o.underline)}`],"button"===o.component&&t.button]}})((0,z.A)(({theme:e})=>({variants:[{props:{underline:"none"},style:{textDecoration:"none"}},{props:{underline:"hover"},style:{textDecoration:"none","&:hover":{textDecoration:"underline"}}},{props:{underline:"always"},style:{textDecoration:"underline","&:hover":{textDecorationColor:"inherit"}}},{props:({underline:e,ownerState:t})=>"always"===e&&"inherit"!==t.color,style:{textDecorationColor:"var(--Link-underlineColor)"}},...Object.entries(e.palette).filter((0,M.A)()).map(([t])=>({props:{underline:"always",color:t},style:{"--Link-underlineColor":e.vars?`rgba(${e.vars.palette[t].mainChannel} / 0.4)`:(0,k.X4)(e.palette[t].main,.4)}})),{props:{underline:"always",color:"textPrimary"},style:{"--Link-underlineColor":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / 0.4)`:(0,k.X4)(e.palette.text.primary,.4)}},{props:{underline:"always",color:"textSecondary"},style:{"--Link-underlineColor":e.vars?`rgba(${e.vars.palette.text.secondaryChannel} / 0.4)`:(0,k.X4)(e.palette.text.secondary,.4)}},{props:{underline:"always",color:"textDisabled"},style:{"--Link-underlineColor":(e.vars||e).palette.text.disabled}},{props:{component:"button"},style:{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none","&::-moz-focus-inner":{borderStyle:"none"},[`&.${G.focusVisible}`]:{outline:"auto"}}}]}))),O=i.forwardRef(function(e,t){const o=(0,c.b)({props:e,name:"MuiLink"}),n=(0,$.A)(),{className:a,color:s="primary",component:l="a",onBlur:d,onFocus:u,TypographyClasses:m,underline:p="always",variant:h="inherit",sx:x,...b}=o,[g,y]=i.useState(!1),f={...o,color:s,component:l,focusVisible:g,underline:p,variant:h},v=(e=>{const{classes:t,component:o,focusVisible:r,underline:n}=e,a={root:["root",`underline${(0,j.A)(n)}`,"button"===o&&"button",r&&"focusVisible"]};return(0,C.A)(a,L,t)})(f);return(0,r.jsx)(T,{color:s,className:(0,A.A)(v.root,a),classes:m,component:l,onBlur:e=>{(0,w.A)(e.target)||y(!1),d&&d(e)},onFocus:e=>{(0,w.A)(e.target)&&y(!0),u&&u(e)},ref:t,ownerState:f,variant:h,...b,sx:[...void 0===P[s]?[{color:s}]:[],...Array.isArray(x)?x:[x]],style:{...b.style,..."always"===p&&"inherit"!==s&&!P[s]&&{"--Link-underlineColor":N({theme:n,ownerState:f})}}})});var V=o(9565);const B=o.p+"b533ffb9d2509c2a2bb5.png",E=()=>{const[e,t]=(0,i.useState)(""),[o,l]=(0,i.useState)(""),[c,d]=(0,i.useState)("");return(0,i.useEffect)(()=>{console.log("Email -",e),console.log("Password -",o)},[e,o]),(0,r.jsx)(n.A,{component:"main",maxWidth:"lg",children:(0,r.jsx)(a.A,{sx:{marginTop:8},children:(0,r.jsxs)(s.A,{container:!0,children:[(0,r.jsx)(b,{}),(0,r.jsx)(s.A,{size:{xs:!1,sm:4,md:7},sx:{backgroundImage:`url(${B})`,backgroundRepeat:"no-repeat",backgroundColor:e=>"light"===e.palette.mode?e.palette.grey[50]:e.palette.grey[900],backgroundSize:"cover",backgroundPosition:"center"}}),(0,r.jsx)(s.A,{size:{xs:12,sm:10,md:5},component:V.A,elevation:6,square:!0,children:(0,r.jsxs)(a.A,{sx:{my:8,mx:4,display:"flex",flexDirection:"column",alignItems:"center"},children:[(0,r.jsx)(g.A,{component:"h1",variant:"h5",children:"Sign in"}),(0,r.jsxs)(a.A,{component:"form",noValidate:!0,onSubmit:e=>{e.preventDefault(),d("Hello")},sx:{mt:1},children:[(0,r.jsx)(y.A,{margin:"normal",required:!0,fullWidth:!0,id:"email",label:"Email Address",name:"email","data-testid":"email-input",autoComplete:"email",autoFocus:!0}),(0,r.jsx)(y.A,{margin:"normal",required:!0,fullWidth:!0,name:"password",label:"Password",type:"password",id:"password","data-testid":"password-input",autoComplete:"current-password"}),(0,r.jsx)(f.A,{control:(0,r.jsx)(v.A,{value:"remember",color:"primary"}),label:"Remember me"}),(0,r.jsx)(S.A,{type:"submit",fullWidth:!0,variant:"contained",sx:{mt:3,mb:2},children:"Sign In"}),(0,r.jsxs)(s.A,{container:!0,children:[(0,r.jsx)(s.A,{size:{xs:6},children:(0,r.jsx)(O,{href:"#",variant:"body2",children:"Forgot password?"})}),(0,r.jsx)(s.A,{size:{xs:6},children:(0,r.jsx)(O,{href:"#",variant:"body2",children:"Don't have an account? Sign Up"})})]})]})]})})]})})})}},6423:(e,t,o)=>{o.d(t,{A:()=>f});var r=o(6540),n=o(4164),a=o(1908),s=o(1362),i=o(7102),l=o(1124),c=o(4808),d=o(5387),u=o(4848);const m=(0,d.A)(),p=(0,c.A)("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`maxWidth${(0,i.A)(String(o.maxWidth))}`],o.fixed&&t.fixed,o.disableGutters&&t.disableGutters]}}),h=e=>(0,l.A)({props:e,name:"MuiContainer",defaultTheme:m});var x=o(9407),b=o(6739),g=o(439);const y=function(e={}){const{createStyledComponent:t=p,useThemeProps:o=h,componentName:l="MuiContainer"}=e,c=t(({theme:e,ownerState:t})=>({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",...!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}}}),({theme:e,ownerState:t})=>t.fixed&&Object.keys(e.breakpoints.values).reduce((t,o)=>{const r=o,n=e.breakpoints.values[r];return 0!==n&&(t[e.breakpoints.up(r)]={maxWidth:`${n}${e.breakpoints.unit}`}),t},{}),({theme:e,ownerState:t})=>({..."xs"===t.maxWidth&&{[e.breakpoints.up("xs")]:{maxWidth:Math.max(e.breakpoints.values.xs,444)}},...t.maxWidth&&"xs"!==t.maxWidth&&{[e.breakpoints.up(t.maxWidth)]:{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`}}})),d=r.forwardRef(function(e,t){const r=o(e),{className:d,component:m="div",disableGutters:p=!1,fixed:h=!1,maxWidth:x="lg",classes:b,...g}=r,y={...r,component:m,disableGutters:p,fixed:h,maxWidth:x},f=((e,t)=>{const{classes:o,fixed:r,disableGutters:n,maxWidth:l}=e,c={root:["root",l&&`maxWidth${(0,i.A)(String(l))}`,r&&"fixed",n&&"disableGutters"]};return(0,s.A)(c,e=>(0,a.Ay)(t,e),o)})(y,l);return(0,u.jsx)(c,{as:m,ownerState:y,className:(0,n.A)(f.root,d),ref:t,...g})});return d}({createStyledComponent:(0,b.Ay)("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`maxWidth${(0,x.A)(String(o.maxWidth))}`],o.fixed&&t.fixed,o.disableGutters&&t.disableGutters]}}),useThemeProps:e=>(0,g.b)({props:e,name:"MuiContainer"})}),f=y}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,